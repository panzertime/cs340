<project name="Catan" default="info" basedir=".">
	
	<description>
		Catan the game
	</description>

	<!-- PROPERTIES -->
	<!-- ********** -->	
    
	<!-- Directory paths for the java server and dest dir for the student copy -->
    <property name="port.arg" value="8081"/>
    <property name="web.arg" value="gameplay"/>
    <property name="options.arg" value="ug"/>
    
    
    <!-- Jar file path/name from here -->
	<property name="demo.dir" value="demo"/>
    <property name="server.jar.file" value="${demo.dir}/server.jar"/>
    <property name="client.jar.file" value="${demo.dir}/client.jar"/>
	 
	<!-- Input folders -->
	<property name="java.src" location="java/src"/>
	<property name="java.test" location="java/test"/>
	<property name="java.lib" value="java/lib"/>
	<property name="java.doc" value="java/docs"/>
	<property name="java.demo.doc" value="${demo.dir}/docs"/>
	
	<property name="java.bin" location="java/bin"/>
	<property name="java.bin.src" location="${java.bin}/src"/>
	<property name="java.bin.test" location="${java.bin}/test"/>
	
	<property name="java.images" location="java/images"/>
	<property name="java.dist" location="java/dist"/>
	<property name="extensions" location="${java.ext.dirs}"/>
	<property name="java.plugin" location="java/plugin"/>
  	<property name="java.db" location="java/database"/>

	<!-- CLASSPATHS -->
	<!-- ********** -->
	
	<path id="java.lib.classpath">
		<fileset dir="${java.lib}" includes="**/*.jar"/>
	</path>
	
	<path id="java.src.classpath">
		<fileset dir="${java.bin.src}" includes="**/*.class"/>
	</path>

	<path id="java.plugin.classpath">
		<fileset dir="${java.plugin}" includes="**/*.jar"/>
	</path>




	<!-- TARGETS -->
	<!-- ******* -->
     
	<target name="demo-server" description="Runs the demo server">
		<java jar="${server.jar.file}" fork="true" dir="${demo.dir}">
			<arg value="${port.arg}"/>
			<arg value="${web.arg}"/>
			<arg value="${options.arg}"/>
			<assertions>
				<enable/>
			</assertions>
		</java>
	</target>
    
	<target name="demo-client" description="Runs the demo client">
		<java jar="${client.jar.file}" fork="true" dir="${demo.dir}">
			<assertions>
				<enable/>
			</assertions>
		</java>
	</target>
    
    <target name="docs" description="Generate the Java docs">
        <delete dir="${java.doc}"/>
		<javadoc destdir="${java.doc}" Package="true">
			<classpath refid="java.lib.classpath" />
			<packageset dir="${java.src}">
				<include name="client/**"/>
				<include name="shared/**"/>
				<include name="server/**"/>
			</packageset>
			<tag name="pre" description="Precondition" />
			<tag name="post" description="Postcondition" />
			<tag name="param.json" description="Parameters (JSON)"/>
		</javadoc>
	</target>
 
	<target name="init" description="create build directories">
		<tstamp/>
		<mkdir dir="${java.bin}"/>
		<mkdir dir="${java.bin.src}"/>
		<mkdir dir="${java.bin.test}"/>
		<mkdir dir="${java.dist}"/>
		<mkdir dir="${java.plugin}"/>
		<mkdir dir="${java.db}"/>
		<mkdir dir="${java.doc}"/>
		<copy todir="${java.doc}/api">
			<fileset dir="${java.demo.doc}/api" />
		</copy>
	</target>
		
	<target name="clean" description="clean build files" >
		<delete dir="${java.bin}"/>
		<delete dir="${java.dist}"/>
		<delete dir="${java.plugin}"/>
		<delete dir="${java.doc}"/>
	</target>
    
	<target name="compileSrc" depends="init" description="compile the source " >
		<javac destdir="${java.bin.src}" debug="true" includeantruntime="true">
			<src path="${java.src}"/>
			<classpath>
				<path refid="java.lib.classpath"/>
				<pathelement location="${java.bin.src}"/>
			</classpath>
		</javac>
	</target>

	<target name="compileTest" depends="compileSrc" description="compile the source " >
		<copy todir="${java.bin.test}">
		  <fileset dir="${java.test}">
		    <exclude name="**/*.java"/>
		  </fileset>
		</copy>
		<javac destdir="${java.bin.test}" debug="true" includeantruntime="true">
			<src path="${java.test}"/>
			<classpath>
				<path refid="java.lib.classpath"/>
				<pathelement location="${java.bin.src}"/>
			</classpath>
		</javac>
	</target>
	
	<target name="package" depends="compileSrc" description="package the jar files" >
		<mkdir dir="${java.dist}/lib"/>
		<copy todir="${java.dist}/lib">
			<fileset dir="${java.lib}">
				<include name="**"/>
			</fileset>
		</copy>
		<mkdir dir="${java.dist}/images"/>
		<copy todir="${java.dist}/images">
			<fileset dir="${java.images}">
				<include name="**"/>
			</fileset>
		</copy>
		<copy todir="${java.dist}/docs">
			<fileset dir="${java.demo.doc}">
				<include name="**"/>
			</fileset>
		</copy>
 		<jar jarfile="${java.dist}/catan-client.jar" duplicate="preserve" basedir="${java.bin.src}">
			<manifest>
				<attribute name="Main-Class" value="client.main.Catan"/>
				<attribute name="Class-Path" value="lib/json-simple-1.1.1.jar" />
			</manifest>
 			<zipgroupfileset dir="${java.lib}" includes="*.jar" excludes=""/>
		</jar>
 		<jar jarfile="${java.dist}/catan-server.jar" duplicate="preserve" basedir="${java.bin.src}">
			<manifest>
				<attribute name="Main-Class" value="server.main.Server"/>
				<attribute name="Class-Path" value="lib/*.jar"/>
			</manifest>
 			<zipgroupfileset dir="${java.lib}" includes="*.jar" excludes=""/>
		</jar>
		<jar jarfile="${java.plugin}/catan-mongodb.jar" duplicate="preserve" basedir="${java.bin.src}/server/persistance/mongo">

  			<fileset dir="${java.bin.src}/server/persistance/mongo" />
			<zipgroupfileset dir="${java.lib}" includes="*.jar" excludes=""/>
			
			<manifest>
				<attribute name="Class-Path" value="lib/*.jar"/>
			</manifest>

			
			<service type="server.persistance.IDAOFactory">
				<provider classname="server.persistance.mongo.MongoDAOFactory" />
			</service>
		</jar>


		<jar jarfile="${java.plugin}/catan-sqlite.jar" duplicate="preserve" basedir="${java.bin.src}/server/persistance/mysql">
			<service type="server.persistance.IDAOFactory">
				<provider classname="server.persistance.mySQL.SQLDAOFactory" />
			</service>	
			<manifest>
				<attribute name="Class-Path" value="${java.lib}/*.jar"/>
			</manifest>
		</jar>

	</target>
	
	<target name="our-client" depends="package" description="compiles, packages, and runs the student client">
		<java jar="${java.dist}/catan-client.jar" dir="${java.dist}" fork="yes">
			<sysproperty key="com.sun.management.jmxremote" value=""/>
			<assertions>
				<enable/>
			</assertions>
		</java>
	</target>
 	
	<property name="persist-type" value="mongo"/>
	<property name="checkpoint-frequency" value="10"/>
		
	<target name="our-server" depends="package" description="compiles, packages, and runs the student server">
		<java jar="${java.dist}/catan-server.jar" dir="${java.dist}" fork="yes">
			<arg value="${persist-type}" />
			<arg value="${checkpoint-frequency}" />
			<arg value="${java.plugin}" />
			<classpath>
				<pathelement path="${java.plugin}"/>
				<path refid="java.lib.classpath"/>
			</classpath>

			<sysproperty key="com.sun.management.jmxremote" value=""/>
			<assertions>
				<enable/>
			</assertions>
		</java>
	</target>
    
	<target name="make-tester-zip" depends="package" description="makes a zip file for your testing team">
     		<zip destfile="./tester.zip">
			<fileset basedir="${java.dist}" />
			<fileset basedir="${java.plugin}" />
			<fileset basedir="${java.doc}" />
		</zip>
	</target>
	
	<target name="test" depends="compileTest" description="compiles and runs the JUnit tests " >
		<java classname="test.Test" fork="yes">
			<classpath>
				<pathelement path="${java.bin.test}"/>
				<pathelement path="${java.bin.src}"/>
				<path refid="java.lib.classpath"/>
			</classpath>
			<assertions>
				<enable/>
			</assertions>
		</java>
	</target>

	<target name="demo-serverclient" description="runs the demo server, then the demo client">
		<parallel>
  			<sequential>
				<java jar="${server.jar.file}" fork="true" dir="${demo.dir}">
					<arg value="${port.arg}"/>
					<arg value="${web.arg}"/>
					<arg value="${options.arg}"/>
					<assertions>
						<enable/>
					</assertions>
				</java>
				</sequential>
  			<sequential>
    				<sleep seconds="5"/>
				<java jar="${client.jar.file}" fork="true" dir="${demo.dir}">
					<assertions>
						<enable/>
					</assertions>
				</java>
  			</sequential>
		</parallel>
	</target>

	<target name="info"> 
		<java classname="org.apache.tools.ant.Main"> 
			<arg value="-projecthelp" /> 
			<arg value="-verbose" />
			<arg value="-buildfile" /> 
			<arg value="${ant.file}" /> 
		</java> 
	</target>
	
	<target name="clear-sql">
	</target>

	<target name="clear-mongo">
	</target>

	<target name="clear-dbs" description="resets both DBs to blank" depends="clear-sql, clear-mongo">
	</target>

</project>

